import express from "express";
import Recipe from "../models/Recipe.model.js";
import User from "../models/User.model.js";

const userRoute = express.Router();

// 2.1 Crie a rota POST /create
// Essa rota ir√° receber requests contendo um objeto com as informa√ß√µes do usu√°rio: username, bio, age, email, isChef. Voc√™ pode acessar essas informa√ß√µes atrav√©s do req.body.
// A rota deve:
// Criar um novo usu√°rio com os valores recebidos da requisi√ß√£o, utilizando o userModel do usu√°rio.
// Retornar uma response em JSON contendo o novo documento criado.
userRoute.post("/create", async (req, res) => {
  try {
    const form = req.body;
    const newUser = await User.create(form);
    
    return res.status(201).json(newUser);

  } catch (error) {
    console.log(error);
  return res.status(500).json(error.errors);
  }
});

// 2.2 Crie a rota GET /read/:userId
// Essa rota ir√° receber o userId pelos par√¢metro de rota e dever√° retornar apenas um usu√°rio. Voc√™ pode acessar esses valores atrav√©s de req.body e req.params para o par√¢metro de rota.
// A rota deve:
// Retornar um √∫nico documento contendo as informa√ß√µes do usu√°rio pelo _id
// Retornar uma response em JSON contendo as informa√ß√µes do usu√°rio com a chave recipes populada. Lembre-se do .populate() üòâ
userRoute.get("/read/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    console.log(userId);
    const user = await User.findById(userId).populate("recipes");
    
    if (!user) {
      return res.status(400).json({ msg: " Usu√°rio n√£o encontrado!" });
    }

    return res.status(200).json(user);

  } catch (error) {
    console.log(error);
    return res.status(500).json(error.errors);
  }
});

// 2.3 Crie a rota PUT /update/:userId
// Esta rota ir√° receber o userId pelos par√¢metros de rota para atualizar as informa√ß√µes do usu√°rio e deve retornar uma response com os dados atualizados do usu√°rio.
// A rota deve:
// Encontrar um usu√°rio pelo _id e atualizar os campos que vieram na req.body
// Retornar uma response em JSON incluindo o documento atualizado do usu√°rio.
userRoute.put("/update/:userId", async (req, res) => {
  try {
    const { userId } = req.params;

    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { ...req.body },
      { new: true, runValidators: true }
    );

    return res.status(200).json(updatedUser);
  } catch (error) {
    console.log(error);
    return res.status(500).json(error.errors);
  }
});

// 2.4 Crie a rota DELETE /delete/:userId
// Essa rota ir√° receber o userId pelos par√¢metros de rota para deletar um usu√°rio e as receitas que esse usu√°rio criou.
// A rota deve:
// Encontrar um usu√°rio pelo _id e delet√°-lo.
// Encontrar as recipes que esse usu√°rio criou e delet√°-las. Lembra do deleteMany()? üëÄ.
// Retornar uma response em JSON retornando apenas o status HTTP de 204.
userRoute.delete("/delete/:userId", async (req, res) => {
  try {
    const { userId } = req.params;

    const deletedUser = await User.findByIdAndDelete(userId);

    if (!deletedUser) {
      return res.status(400).json({ msg: "Usu√°rio n√£o encontrado!" });
    }

    //deletar TODAS as receitas que o usu√°rio √© dono
    await Recipe.deleteMany({ user: userId })

    return res.status(204);
  } catch (error) {
    console.log(error);
    return res.status(500).json(error.errors);
  }
});


export default userRoute;
