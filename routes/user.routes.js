import express from "express";
import Recipe from "../models/Recipe.model.js";
import UserModel from "../models/User.model.js";

const userRoute = express.Router();

// 2.1 Crie a rota POST /create
// Essa rota irÃ¡ receber requests contendo um objeto com as informaÃ§Ãµes do usuÃ¡rio: username, bio, age, email, isChef. VocÃª pode acessar essas informaÃ§Ãµes atravÃ©s do req.body.
// A rota deve:
// Criar um novo usuÃ¡rio com os valores recebidos da requisiÃ§Ã£o, utilizando o userModel do usuÃ¡rio.
// Retornar uma response em JSON contendo o novo documento criado.
userRoute.post("/create", async (req, res) => {
  try {
    const form = req.body;
    const newUser = await UserModel.create(form);
    
    return res.status(201).json(newUser);

  } catch (error) {
    console.log(error);
  return res.status(500).json(error.errors);
  }
});

// 2.2 Crie a rota GET /read/:userId
// Essa rota irÃ¡ receber o userId pelos parÃ¢metro de rota e deverÃ¡ retornar apenas um usuÃ¡rio. VocÃª pode acessar esses valores atravÃ©s de req.body e req.params para o parÃ¢metro de rota.
// A rota deve:
// Retornar um Ãºnico documento contendo as informaÃ§Ãµes do usuÃ¡rio pelo _id
// Retornar uma response em JSON contendo as informaÃ§Ãµes do usuÃ¡rio com a chave recipes populada. Lembre-se do .populate() ðŸ˜‰
userRoute.get("/read/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    console.log(userId);
    const user = await UserModel.findById(userId).populate("recipes");
    
    if (!user) {
      return res.status(400).json({ msg: " UsuÃ¡rio nÃ£o encontrado!" });
    }

    return res.status(200).json(user);

  } catch (error) {
    console.log(error);
    return res.status(500).json(error.errors);
  }
});

// 2.3 Crie a rota PUT /update/:userId
// Esta rota irÃ¡ receber o userId pelos parÃ¢metros de rota para atualizar as informaÃ§Ãµes do usuÃ¡rio e deve retornar uma response com os dados atualizados do usuÃ¡rio.
// A rota deve:
// Encontrar um usuÃ¡rio pelo _id e atualizar os campos que vieram na req.body
// Retornar uma response em JSON incluindo o documento atualizado do usuÃ¡rio.
userRoute.put("/update/:userId", async (req, res) => {
  try {
    const { userId } = req.params;

    const updatedUser = await UserModel.findByIdAndUpdate(
      userId,
      { ...req.body },
      { new: true, runValidators: true }
    );

    return res.status(200).json(updatedUser);
  } catch (error) {
    console.log(error);
    return res.status(500).json(error.errors);
  }
})


export default userRoute;
